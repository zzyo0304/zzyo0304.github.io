<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2023 总结</title>
      <link href="/2024/03/10/2023%E6%80%BB%E7%BB%93/"/>
      <url>/2024/03/10/2023%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>2023年2月14日，第一次去了博物馆，人很多，感觉好无聊，里面很暖和，但是觉得好无聊，图片如下<br>懒得排列，就直接放上来把</p><div> <img src="https://www.zzyo.fun/img/河南博物馆1.jpg"； style="display:inline-block;width:40%;height:171px;" /><img src="https://www.zzyo.fun/img/河南博物馆2.jpg"；  style="display:inline-block;width:40%;height:171px;" />  <img src="https://www.zzyo.fun/img/河南博物馆3.jpg"；  style="display:inline-block;width:40%;height:171px;" />  <img src="https://www.zzyo.fun/img/河南博物馆4.jpg"； style="display:inline-block;width:40%;height:171px;" />  <img src="https://www.zzyo.fun/img/河南博物馆5.jpg"；  style="display:inline-block;width:40%;height:171px;" />  <img src="https://www.zzyo.fun/img/河南博物馆6.jpg"；  style="display:inline-block;width:40%;height:171px;" />  <img src="https://www.zzyo.fun/img/河南博物馆7.jpg"； style="display:inline-block;width:40%;height:171px;" />  </div>]]></content>
      
      
      <categories>
          
          <category> 游玩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>刷入面具教程</title>
      <link href="/2024/03/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E5%85%A5%E9%9D%A2%E5%85%B7/"/>
      <url>/2024/03/09/%E5%B0%8F%E7%B1%B3%E6%89%8B%E6%9C%BA%E5%88%B7%E5%85%A5%E9%9D%A2%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>一、小米解锁 Bootloader：<br>二、下载系统包：<br>三、提取 boot.img<br>四、手机插电脑，文件传输模式，复制 boot.img 到手机 Download 目录<br>五、手机下载 Magisk APP 安装：Magisk-downloa<br>六、打开 Magisk，1：安装 – 2：选择 boot.img – 3：开始修补文件 – 4：修补成功<br><img src="https://www.zzyo.fun/img/小米.png" width="200" height="100"><br>七、电脑下载 adb-fastboot：<a href="https://mrzzoxo.lanzoui.com/b02plghuh%EF%BC%88%E8%A7%A3%E5%8E%8B%E5%87%BA%E6%9D%A5%EF%BC%89">https://mrzzoxo.lanzoui.com/b02plghuh（解压出来）</a><br>八、手机插电脑，打开 文件传输 模式，打开 Download 目录，把 boot.img 和 magisk.img 复制到电脑 adb-fastboot 目录<br>九、手机进入 Bootloader 模式，再插入电脑。<br>（手机关机，电源键+音量下键，两个键长按）<br>十、打开“打开CMD命令行.bat”，输入下面的命令<br>注意magisk.img每次修补的名字都不一样，使用的时候请输入生成的名字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastboot flash boot 面具文件</span><br></pre></td></tr></table></figure><p>十一、输出下面这三行代码，就是成功刷入了。再使用指令 fastboot reboot 重启手机。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sending &#x27;boot&#x27; (131072 KB) OKAY [ 3.105s]</span><br><span class="line">Writing &#x27;boot&#x27;             OKAY [ 0.404s]</span><br><span class="line">Finished. Total time: 3.556s</span><br></pre></td></tr></table></figure><p>十二、重启手机（开机有震动基本没问题了）耐心等手机开机。（打开面具显示Magisk的版本，就是刷好了的）</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 玩机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础知识</title>
      <link href="/2024/03/04/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2024/03/04/linux%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基础知识"><a href="#一、基础知识" class="headerlink" title="一、基础知识"></a>一、基础知识</h2><h3 id="1-1-Linux系统的文件结构"><a href="#1-1-Linux系统的文件结构" class="headerlink" title="1.1 Linux系统的文件结构"></a>1.1 Linux系统的文件结构</h3><p>&#x2F;bin        二进制文件，系统常规命令<br>&#x2F;boot       系统启动分区，系统启动时读取的文件<br>&#x2F;dev        设备文件<br>&#x2F;etc        大多数配置文件<br>&#x2F;home       普通用户的家目录<br>&#x2F;lib        32位函数库<br>&#x2F;lib64      64位库<br>&#x2F;media      手动临时挂载点<br>&#x2F;mnt        手动临时挂载点<br>&#x2F;opt        第三方软件安装位置<br>&#x2F;proc       进程信息及硬件信息<br>&#x2F;root       临时设备的默认挂载点<br>&#x2F;sbin       系统管理命令<br>&#x2F;srv        数据<br>&#x2F;var        数据<br>&#x2F;sys        内核相关信息<br>&#x2F;tmp        临时文件<br>&#x2F;usr        用户相关设定</p><h3 id="1-2-Linux系统命令行的含义"><a href="#1-2-Linux系统命令行的含义" class="headerlink" title="1.2 Linux系统命令行的含义"></a>1.2 Linux系统命令行的含义</h3><p>示例：root@app00:~<br>root    &#x2F;&#x2F;用户名，root为超级用户<br>@       &#x2F;&#x2F;分隔符<br>app00   &#x2F;&#x2F;主机名称<br> ~       &#x2F;&#x2F;当前所在目录，默认用户目录为~，会随着目录切换而变化，例如：（root@app00:&#x2F;bin# ，当前位置在bin目录下）</p><h2 id="二、基础操作"><a href="#二、基础操作" class="headerlink" title="二、基础操作"></a>二、基础操作</h2><h3 id="2-1-关机"><a href="#2-1-关机" class="headerlink" title="2.1 关机"></a>2.1 关机</h3><p>(1)立刻关机<br>  shutdown -h now 或者 poweroff<br>(2)两分钟后关机<br>  shutdown -h 2</p><h3 id="2-2-重启"><a href="#2-2-重启" class="headerlink" title="2.2 重启"></a>2.2 重启</h3><p>(1)立刻重启<br>  shutdown -r now 或者 reboot<br>(2)两分钟后重启<br>  shutdown -r 2 </p><h3 id="2-3-帮助命令（help）"><a href="#2-3-帮助命令（help）" class="headerlink" title="2.3 帮助命令（help）"></a>2.3 帮助命令（help）</h3><p>  ifconfig  –help     &#x2F;&#x2F;查看 ifconfig 命令的用法</p><h2 id="三、目录操作"><a href="#三、目录操作" class="headerlink" title="三、目录操作"></a>三、目录操作</h2><h3 id="3-1-切换目录（cd）"><a href="#3-1-切换目录（cd）" class="headerlink" title="3.1 切换目录（cd）"></a>3.1 切换目录（cd）</h3><p>  cd &#x2F;                 &#x2F;&#x2F;切换到根目录<br>  cd &#x2F;bin              &#x2F;&#x2F;切换到根目录下的bin目录<br>  cd ..&#x2F;               &#x2F;&#x2F;切换到上一级目录 或者使用命令：cd ..<br>  cd ~                 &#x2F;&#x2F;切换到home目录<br>  cd -                 &#x2F;&#x2F;切换到上次访问的目录<br>  cd xx(文件夹名)       &#x2F;&#x2F;切换到本目录下的名为xx的文件目录，如果目录不存在报错<br>  cd &#x2F;xxx&#x2F;xx&#x2F;x         &#x2F;&#x2F;可以输入完整的路径，直接切换到目标目录，输入过程中可以使用tab键快速补全</p><h3 id="3-2-查看目录（ls）"><a href="#3-2-查看目录（ls）" class="headerlink" title="3.2 查看目录（ls）"></a>3.2 查看目录（ls）</h3><p>  ls                   &#x2F;&#x2F;查看当前目录下的所有目录和文件<br>  ls -a                &#x2F;&#x2F;查看当前目录下的所有目录和文件（包括隐藏的文件）<br>  ls -l                &#x2F;&#x2F;列表查看当前目录下的所有目录和文件（列表查看，显示更多信息），与命令”ll”效果一样<br>  ls &#x2F;bin              &#x2F;&#x2F;查看指定目录下的所有目录和文件 </p><h3 id="3-3-创建目录（mkdir）"><a href="#3-3-创建目录（mkdir）" class="headerlink" title="3.3 创建目录（mkdir）"></a>3.3 创建目录（mkdir）</h3><p>  mkdir tools          &#x2F;&#x2F;在当前目录下创建一个名为tools的目录<br>  mkdir &#x2F;bin&#x2F;tools     &#x2F;&#x2F;在指定目录下创建一个名为tools的目录</p><h3 id="3-4-删除目录与文件（rm）"><a href="#3-4-删除目录与文件（rm）" class="headerlink" title="3.4 删除目录与文件（rm）"></a>3.4 删除目录与文件（rm）</h3><p>  rm 文件名              &#x2F;&#x2F;删除当前目录下的文件<br>  rm -f 文件名           &#x2F;&#x2F;删除当前目录的的文件（不询问）<br>  rm -r 文件夹名         &#x2F;&#x2F;递归删除当前目录下此名的目录<br>  rm -rf 文件夹名        &#x2F;&#x2F;递归删除当前目录下此名的目录（不询问）<br>  rm -rf *              &#x2F;&#x2F;将当前目录下的所有目录和文件全部删除<br>  rm -rf &#x2F;*             &#x2F;&#x2F;将根目录下的所有文件全部删除【慎用！相当于格式化系统】</p><h3 id="3-5-修改目录（mv）"><a href="#3-5-修改目录（mv）" class="headerlink" title="3.5 修改目录（mv）"></a>3.5 修改目录（mv）</h3><p>  mv 当前目录名 新目录名        &#x2F;&#x2F;修改目录名，同样适用与文件操作<br>  mv &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt       &#x2F;&#x2F;将&#x2F;usr&#x2F;tmp目录下的tool目录剪切到 &#x2F;opt目录下面<br>  mv -r &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt    &#x2F;&#x2F;递归剪切目录中所有文件和文件夹</p><h3 id="3-6-拷贝目录（cp）"><a href="#3-6-拷贝目录（cp）" class="headerlink" title="3.6 拷贝目录（cp）"></a>3.6 拷贝目录（cp）</h3><p>  cp &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt       &#x2F;&#x2F;将&#x2F;usr&#x2F;tmp目录下的tool目录复制到 &#x2F;opt目录下面<br>  cp -r &#x2F;usr&#x2F;tmp&#x2F;tool &#x2F;opt    &#x2F;&#x2F;递归剪复制目录中所有文件和文件夹</p><h3 id="3-7-搜索目录（find）"><a href="#3-7-搜索目录（find）" class="headerlink" title="3.7 搜索目录（find）"></a>3.7 搜索目录（find）</h3><p>  find &#x2F;bin -name ‘a*’        &#x2F;&#x2F;查找&#x2F;bin目录下的所有以a开头的文件或者目录</p><h3 id="3-8-查看当前目录（pwd）"><a href="#3-8-查看当前目录（pwd）" class="headerlink" title="3.8 查看当前目录（pwd）"></a>3.8 查看当前目录（pwd）</h3><p>  pwd                         &#x2F;&#x2F;显示当前位置路径</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python 笔记</title>
      <link href="/2023/05/27/python/"/>
      <url>/2023/05/27/python/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>python 是一种弱类型语言，变量可以不声明直接使用，变量的类型由其值决定，为其赋值后会自动创建</p><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p> 变量名可以是单字母，也可以是字母加下划线加数字的组合，但数字不能在变量名的首位<br> 变量名可以是中文<br> 区分大小写<br> 不可使用系统关键字</p><h3 id="变量的使用"><a href="#变量的使用" class="headerlink" title="变量的使用"></a>变量的使用</h3><p> 变量可以多个同时赋值即，变量可以同时定义多个，格式如下:<br> 变量1，变量2，变量… ,变量n&#x3D;值1，值2，值…，值n<br> 例如 name，age &#x3D;张三，18<br>  变量的值也可同时修改多个，如：<br>  x,y&#x3D;1,3<br>  x,y&#x3D;y,x 输出两个变量结果为，x&#x3D;3，y&#x3D;1<br>  对于赋值运算，会先计算赋值运算符右边表达式的值，后在把计算结果给赋值左边的变量</p><h3 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h3><p> python常用的变量类型有7种，<br> 1.Number(数字型)<br> 2.String（字符串）<br> 3.List （列表）<br> 4.Tuple（元组）<br> 5.Set （集合）<br> 6.Dictionary（字典）<br> 7.Boolean （布尔）</p><h4 id="1-Number（数字型"><a href="#1-Number（数字型" class="headerlink" title="1.Number（数字型)"></a>1.Number（数字型)</h4><p> 分为int（整形），flat（浮点型），complex（复数类型）<br> 1.整形：包括正整形，负整形，0，不可带小数点，无大小限制<br> 可以用不同进制表示，加0o为8进制，加0x为16进制，不加为10进制<br> 2.浮点型：带小数点的数字型，可用于表示实数，可用科学计数法表示<br> 查看浮点型的取值范围<br>     import sys # 导入<br>    sys.float_info #查看当前环境中浮点型的取值范围和精度</p><p> 3.复数: 复数有实部和虚部组组成，每一部分都是一个浮点数，书写方法如下<br> a+bj或a+bJ<br> 生成复数时，也可以用complex函数，语法格式如下：<br>    complex([real[,imag]])</p><p> 其中real 为实部值，imag为虚部值，返回值为real+imag* 1j</p><h4 id="2-String（字符串）"><a href="#2-String（字符串）" class="headerlink" title="2.String（字符串）"></a>2.String（字符串）</h4><p> python 中只有报错字符串的string 类型，没有单独保存单个字符的数据类型<br> python 中可以写在一对单引号中，也可以写在一对双引号或者三引号中<br> 对于不包含任何字符的字符串成为空字符串<br> 字符串可以使用int函数或float函数将只包含数字值的字符串转为数字型，这两种函数不可以计算表达式<br> 字符串常用转义字符<br> \ 在一行末尾时表示续行符 \表示反斜杠符号<br> &#39; 单引号   &quot; 双引号  \n换行符  \r回车  \t 制表符<br> python 字符串截取<br>     strname[index] #单个字符截取<br>     #strname 表示字符串名字，index 表示索引值。<br>     strname[start : end : step] #多个字符截取<br>     strname：要截取的字符串；<br>    start：表示要截取的第一个字符所在的索引（截取时包含该字符）。如果不指定，默认为 0，也就是从字符串的开头截取；<br>    end：表示要截取的最后一个字符所在的索引（截取时不包含该字符）。如果不指定，默认为字符串的长度；<br>    step：指的是从 start 索引处的字符开始，每 step 个距离获取一个字符，直至 end 索引出的字符。step 默认值为 1，当省略该值时，最后一个冒号也可以省略。</p><h4 id="3-List-（列表）"><a href="#3-List-（列表）" class="headerlink" title="3.List （列表）"></a>3.List （列表）</h4><p> 列表是python 中非常重要的类型<br> 列表中可以有很多的元素，而且元素类型可以不同，每一元素可以是任意数据类型，包列表（即列表嵌套）及元组集合字典<br> 所有蒜素卸载一对 “[]” 中，每两个元素之间用逗号分隔，对于不包含任何元素的列表，即 “[]”，被称为空列表<br> 列表利用下标“[]”可以从已有列表中取出一部分元素，组成新的列表<br> 列表的索引方式与字符串相同，支持从前索引和从后向许索引，两种方式，例如<br>     ls[bed:end]<br>    其中，bed代表要代表去取出出部分在列表ls中的起始下标，end表示要取出部分元素在ls中的结束下标<br>    省略bed，则表示从ls中的第一个元素开始，等价于ls[0:end];<br>    省略end则表示要取出的部分元素从bed位置开始，之后的所有元素，<br>    省略两个参数代表取出ls中的所有元素<br>    若只是访问单一列表，则可以<br>    ls[index] #注意，这种方式返回的值是列表中的单一元素<br>    而     s[bed:end]，返回的仍是一个列表</p><p>元素的值可以通过下标进行更改，例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [1, 2, 3]</span><br><span class="line">my_list[1] = 4</span><br><span class="line">print(my_list)</span><br><span class="line">输出结果为：[1, 4, 3]    </span><br><span class="line">my_list = [1, 2, 3, 4, 5, 6, 7]</span><br><span class="line">my_list[1:4] = [&quot;my&quot;, &quot;1&quot;]</span><br><span class="line">print(my_list)</span><br><span class="line">输出结果为：[1, &quot;my&quot;, &quot;1&quot;, 5, 6, 7]。</span><br></pre></td></tr></table></figure><p>同时可以利用空列表删除元素比如，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">my_list = [1, 2, 3, 4, 5]</span><br><span class="line">my_list[0:2] = []</span><br><span class="line">print(my_list)</span><br><span class="line">输出结果为：[3, 4, 5]</span><br></pre></td></tr></table></figure><h4 id="4-Tuple（元组）"><a href="#4-Tuple（元组）" class="headerlink" title="4.Tuple（元组）"></a>4.Tuple（元组）</h4><p>元组与列表类似 ，可以包含多个元素，且元素类型可以不相同，两个元素之间也是用逗号分隔<br>与元组不同的是，元组中的所有元素都在一对小括号（）中，且元组中的元素不可进行修改<br>对于不包含任何元素的元组，称为空元组，即（）<br>元组的索引访问方式列表完全相同<br>     t[bed:end]<br>    其中，bed代表要代表去取出出部分在元组t中的起始下标，end表示要取出部分元素在t中的结束下标<br>    省略bed，则表示从ls中的第一个元素开始，等价于t[0:end];<br>    省略end则表示要取出的部分元素从bed位置开始，之后的所有元素，<br>    省略两个参数代表取出ls中的所有元素<br>    若只是访问单一元组元素，则可以<br>    t[index] #注意，这种方式返回的值是列表中的单一元素<br>    而     t[bed:end]，返回的仍是一个元组</p><p>注意：字符串、列表和元组的元素都是按下标顺序排列，可通过下标直接访问，这样的数据类型统一称为序列<br>其中，字符串和元组中的元素不能修改，而列表中的元素可以修改</p><h4 id="5-Set-（集合）"><a href="#5-Set-（集合）" class="headerlink" title="5.Set （集合）"></a>5.Set （集合）</h4><p>与元组和列表类似，set（集合）中同样可以包含多个不同种类元素，但集合中的各个元素无序、不允许有相同元素且元素必须是可哈希（hashable）的对象<br>可哈希对象是指拥有个_hash_(self) 内置函数的对象。列表、集合、字典类型的数据是不可哈希对象，所以他们不能作为集合中的元素<br>创建集合:<br>集合中的元素都写在一对大括号“{}”中，各元素之间用逗号分割，创建集合时可以用“{}”，也可以用set函数，set函数的语法格式如下：set([iterable])<br>其中，iterable是一个可选参数，表示一个可迭代对象 # 可迭代对象是指可以一次返回他的一个元素，如前面所说的字符串、列表、元组都是可迭代的数据类型<br>例如：<br>    a &#x3D; {1, 2, 3, 4, 5}<br>    b&#x3D;set(“hello”)</p><p>与字符串、列表、元组等序列类型不同，集合中的元素不可使用下标索引来访问<br>集合主要用与做并、交、差等集合运算，以及基于集合进行元素的快速检索<br>“{}”用于创建空字典，如果要创建一个空集合，则要使用set（）</p><h4 id="6-Dictionary（字典）"><a href="#6-Dictionary（字典）" class="headerlink" title="6.Dictionary（字典）"></a>6.Dictionary（字典）</h4><p> Dictionary（字典）时另外一种无序集合，与集合不同，字典是一种映射类型，每一个元素都是一个键（key）:值（value）对<br> 在一个字典种，键必须是唯一的，即不同的元素的键不能相同；<br> 另外,键必须是可哈希数据，即键不能是、列表、集合、字典等类型；其中值可以是任意类型<br>  对于不包含任何元素的字典，即{}，称为空字典，即可以使用“{}”来创建，也可以使用dict（）函数如<br>  a&#x3D;{}<br>  b&#x3D;dict（）<br>  两者都是不包含任何元素的空字典<br> 创建字典的方法<br>     使用花括号{}和冒号:来创建字典，例如：<br>    my_dict &#x3D; {‘key1’: ‘value1’, ‘key2’: ‘value2’}<br>    使用dict()函数来创建字典，例如：<br>    my_dict &#x3D; dict(key1&#x3D;’value1’, key2&#x3D;’value2’)<br>    使用zip()函数将两个列表合并为字典，例如：<br>    keys &#x3D; [‘key1’, ‘key2’]<br>    values &#x3D; [‘value1’, ‘value2’]<br>    my_dict &#x3D; dict(zip(keys, values))</p><p>字典不能通过下标索引访问，而是通过键访问<br>    my_dict &#x3D; {‘key1’: ‘value1’, ‘key2’: ‘value2’}<br>    print(my_dict[‘key1’])  # 输出’value1’</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h4 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h4><p>运算符类似c语言中sprintf或者printf函数中使用的占位符，在字符串中可以给出一些占位符来表示不同类型的数据，而实际的数据值在字段串之外给出。<br>常用的占位符如下<br>    %s：用于替换字符串<br>    %d：用于替换整数<br>    %f：用于替换浮点数<br>    示例：name &#x3D; ‘Alice’<br>    age &#x3D; 20<br>    height &#x3D; 1.65<br>    print(‘My name is %s, I am %d years old and %.2f meters tall.’ % (name, age, height))<br>    结果为：My name is Alice, I am 20 years old and 1.65 meters tall.</p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>在Python中，常用的算数运算符有以下几种：<br>    加法运算符：+<br>    减法运算符：-<br>    乘法运算符：*<br>    除法运算符：&#x2F;<br>    取余运算符：%<br>    取整除运算符：&#x2F;&#x2F;<br>    成方运算符：**</p><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p>在Python中，常用的赋值运算符有以下几种：<br>    等号运算符：&#x3D;<br>    加等于运算符：+&#x3D;<br>    减等于运算符：-&#x3D;<br>    乘等于运算符：*&#x3D;<br>    除等于运算符：&#x2F;&#x3D;<br>    取余等于运算符：%&#x3D;<br>    取整除等于运算符：&#x2F;&#x2F;&#x3D;</p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>在Python中，常用的比较运算符有以下几种：<br>    等于运算符：&#x3D;&#x3D;<br>    不等于运算符：!&#x3D;<br>    大于运算符：&gt;<br>    小于运算符：&lt;<br>    大于等于运算符：&gt;&#x3D;<br>    小于等于运算符：&lt;&#x3D;</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>在Python中，常用的逻辑运算符有以下三种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">与运算符：and</span><br><span class="line">或运算符：or</span><br><span class="line">非运算符：not</span><br></pre></td></tr></table></figure><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p>十进制转二进制<br>除基取余法：<br>用2去除十进制整数，得到商和余数；<br>如果商不为0，则继续使用2除，再得到商和余数，重复该步骤直到商为0；最后将余数按照从后到前的顺序排列，即得到转换后的二进制数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">除基数取余法中的基指的是基数，基数即为一种数制中可用数码的个数。二进制可用的数码中有0和1两个，所以二进制的基数是2</span><br></pre></td></tr></table></figure><p>二进制数转十进制数的规则就是 ”按权展开求和“，即将二进制数的每一位写成数码乘以位权的形式，在对乘积求和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Python中的位运算符有：</span><br><span class="line"></span><br><span class="line">- 按位与（&amp;）</span><br><span class="line">- 按位或（|）</span><br><span class="line">- 按位异或（^）</span><br><span class="line">- 按位取反（~）</span><br><span class="line">- 左移位（&lt;&lt;）</span><br><span class="line">- 右移位（&gt;&gt;）</span><br><span class="line"></span><br><span class="line">例如，假设有两个二进制数 0b1010 和 0b1100，我们可以使用位运算符进行操作：</span><br><span class="line"></span><br><span class="line">- 按位与：0b1010 &amp; 0b1100 = 0b1000</span><br><span class="line">- 按位或：0b1010 | 0b1100 = 0b1110</span><br><span class="line">- 按位异或：0b1010 ^ 0b1100 = 0b0110</span><br><span class="line">- 按位取反：~0b1010 = 0b0101 </span><br><span class="line">- 左移位：0b1010 &lt;&lt; 2 = 0b101000</span><br><span class="line">- 右移位：0b1010 &gt;&gt; 2 = 0b10</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/27/hello-world/"/>
      <url>/2023/05/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><p>More info: <a href="https://chatgpt.zzyo.top/">Generating</a></p><p>sk-KBSS5v5删除S53qjIsmEXxqU删除T3BlbkFJLDupUqSMQ9qgK删除cA2SHbN</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
